#include <stdio.h>
#include <stdint.h>

#define MCP23S17_IODIRA 	0x00
#define MCP23S17_IODIRB 	0x01
#define MCP23S17_IPOLA 		0x02
#define MCP23S17_IPOLB 		0x03
#define MCP23S17_GPINTENA 	0x04
#define MCP23S17_GPINTENB 	0x05
#define MCP23S17_DEFVALA 	0x06
#define MCP23S17_DEFVALB 	0x07
#define MCP23S17_INTCONA 	0x08
#define MCP23S17_INTCONB 	0x09
#define MCP23S17_IOCON1 	0x0A
#define MCP23S17_IOCON2 	0x0B
#define MCP23S17_GPPUA 		0x0C
#define MCP23S17_GPPUB 		0x0D
#define MCP23S17_INTFA 		0x0E
#define MCP23S17_INTFB 		0x0F
#define MCP23S17_INTCAPA 	0x10
#define MCP23S17_INTCAPB 	0x11
#define MCP23S17_GPIOA 		0x12
#define MCP23S17_GPIOB 		0x13
#define MCP23S17_OLATA 		0x14
#define MCP23S17_OLATB 		0x15

#define MCP23S17_NR_REGS	0x16
#define MCP23S17_BANK_0 	0x0
#define MCP23S17_BANK_1		0x1

#define MCP23S17_ADDRESS_MASK 	~(0x4e) // | 0 | 1 | 0 | 0 | A2 | A1 | A0 | R/W |

#define MCP23S17_REG_TO_STRING(a) #a

static inline int MCP23S17_convert_reg(uint8_t bank, uint8_t reg)
{
	if (bank == MCP23S17_BANK_1) {
		return (reg % 2 ? (reg / 2 + (1 << 4)): reg / 2);
	}
	return reg;
}

static inline char* MCP23S17_reg_to_string(int reg) {
	switch (reg) {
		case MCP23S17_IODIRA:
			return MCP23S17_REG_TO_STRING(MCP23S17_IODIRA);
		case MCP23S17_IODIRB:
			return MCP23S17_REG_TO_STRING(MCP23S17_IODIRB);
		case MCP23S17_IPOLA:
			return MCP23S17_REG_TO_STRING(MCP23S17_IPOLA);
		case MCP23S17_IPOLB:
			return MCP23S17_REG_TO_STRING(MCP23S17_IPOLB);
		case MCP23S17_GPINTENA:
			return MCP23S17_REG_TO_STRING(MCP23S17_GPINTENA);
		case MCP23S17_GPINTENB:
			return MCP23S17_REG_TO_STRING(MCP23S17_GPINTENB);
		case MCP23S17_DEFVALA:
			return MCP23S17_REG_TO_STRING(MCP23S17_DEFVALA);
		case MCP23S17_DEFVALB:
			return MCP23S17_REG_TO_STRING(MCP23S17_DEFVALB);
		case MCP23S17_INTCONA:
			return MCP23S17_REG_TO_STRING(MCP23S17_INTCONA);
		case MCP23S17_INTCONB:
			return MCP23S17_REG_TO_STRING(MCP23S17_INTCONB);
		case MCP23S17_IOCON1:
			return MCP23S17_REG_TO_STRING(MCP23S17_IOCON1);
		case MCP23S17_IOCON2:
			return MCP23S17_REG_TO_STRING(MCP23S17_IOCON2);
		case MCP23S17_GPPUA:
			return MCP23S17_REG_TO_STRING(MCP23S17_GPPUA);
		case MCP23S17_GPPUB:
			return MCP23S17_REG_TO_STRING(MCP23S17_GPPUB);
		case MCP23S17_INTFA:
			return MCP23S17_REG_TO_STRING(MCP23S17_INTFA);
		case MCP23S17_INTFB:
			return MCP23S17_REG_TO_STRING(MCP23S17_INTFB);
		case MCP23S17_INTCAPA:
			return MCP23S17_REG_TO_STRING(MCP23S17_INTCAPA);
		case MCP23S17_INTCAPB:
			return MCP23S17_REG_TO_STRING(MCP23S17_INTCAPB);
		case MCP23S17_GPIOA:
			return MCP23S17_REG_TO_STRING(MCP23S17_GPIOA);
		case MCP23S17_GPIOB:
			return MCP23S17_REG_TO_STRING(MCP23S17_GPIOB);
		case MCP23S17_OLATA:
			return MCP23S17_REG_TO_STRING(MCP23S17_OLATA);
		case MCP23S17_OLATB:
			return MCP23S17_REG_TO_STRING(MCP23S17_OLATB);
		default:
			return NULL;
	}
	return NULL;
}
